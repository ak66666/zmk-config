/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/led/led.h>

/ {
  chosen: chosen {
    zmk,kscan = &kscan0;
    zmk,matrix_transform = &default_transform;
    zmk,underglow = &led_strip;
  };

  default_transform: keymap_transform_0 {
    compatible = "zmk,matrix-transform";
    columns = <12>;
    rows = <4>;
// | SW1  | SW2  | SW3  | SW4  | SW5  | SW6  |                                 | SW6  | SW5  | SW4  | SW3  | SW2  | SW1  |
// | SW7  | SW8  | SW9  | SW10 | SW11 | SW12 |                                 | SW12 | SW11 | SW10 | SW9  | SW8  | SW7  |
// | SW13 | SW14 | SW15 | SW16 | SW17 | SW18 |                                 | SW18 | SW17 | SW16 | SW15 | SW14 | SW13 |
//                                           | SW19 |                   | SW19 |
//                             | SW20 | SW21 | SW22 | SW23 |     | SW23 | SW22 | SW21 | SW20 |
    map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                                       RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                                       RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)                                       RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
                                                RC(3,5)                       RC(3,6)
                                RC(3,1) RC(3,2) RC(3,3) RC(3,4)       RC(3,7) RC(3,8) RC(3,9) RC(3,10)
    >;
  };

  five_column_transform: keymap_transform_1 {
    compatible = "zmk,matrix-transform";
    columns = <10>;
    rows = <4>;
// | SW2  | SW3  | SW4  | SW5  | SW6  |                                 | SW6  | SW5  | SW4  | SW3  | SW2  |
// | SW8  | SW9  | SW10 | SW11 | SW12 |                                 | SW12 | SW11 | SW10 | SW9  | SW8  |
// | SW14 | SW15 | SW16 | SW17 | SW18 |                                 | SW18 | SW17 | SW16 | SW15 | SW14 |
//                                    | SW19 |                   | SW19 |
//                      | SW20 | SW21 | SW22 | SW23 |     | SW23 | SW22 | SW21 | SW20 |
    map = <
RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                                       RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10)
RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                                       RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10)
RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)                                       RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10)
                                        RC(3,5)                       RC(3,6)
                        RC(3,1) RC(3,2) RC(3,3) RC(3,4)       RC(3,7) RC(3,8) RC(3,9) RC(3,10)
    >;
  };

  kscan0: kscan {
    compatible = "zmk,kscan-gpio-matrix";
    wakeup-source;

    diode-direction = "col2row";
    row-gpios
      = <&pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      , <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
      ;

  };

  sensors {
    compatible = "zmk,keymap-sensors";
    sensors = <&left_encoder &right_encoder>;
    left {
      // EVQWK
      triggers-per-rotation = <15>;
    };
    right {
      // EC11
      triggers-per-rotation = <20>;
    };
  };

  left_encoder: encoder_left {
    status = "disabled";
    compatible = "alps,ec11";
    a-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    b-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    steps = <30>;
  };

  right_encoder: encoder_right {
    status = "disabled";
    compatible = "alps,ec11";
    a-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    b-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    steps = <80>;
  };
};

&pinctrl {
  spi1_default: spi1_default {
    group1 {
      psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
        <NRF_PSEL(SPIM_MOSI, 0, 17)>,
        <NRF_PSEL(SPIM_MISO, 0, 25)>;
    };
  };
  spi1_sleep: spi1_sleep {
    group1 {
      psels = <NRF_PSEL(SPIM_SCK, 0, 20)>,
        <NRF_PSEL(SPIM_MOSI, 0, 17)>,
        <NRF_PSEL(SPIM_MISO, 0, 25)>;
      low-power-enable;
    };
  };
  spi3_default: spi3_default {
    group1 {
      psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
    };
  };

  spi3_sleep: spi3_sleep {
    group1 {
      psels = <NRF_PSEL(SPIM_MOSI, 0, 6)>;
      low-power-enable;
    };
  };
  
  i2c0_default: i2c0_default {
    group1 {
      psels = <NRF_PSEL(TWIM_SDA, 1, 0)>,
          <NRF_PSEL(TWIM_SCL, 0, 24)>;
    };
  };

  i2c0_sleep: i2c0_sleep {
    group1 {
      psels = <NRF_PSEL(TWIM_SDA, 1, 0)>,
          <NRF_PSEL(TWIM_SCL, 0, 24)>;
      low-power-enable;
    };
  };
};

&spi3 {
  compatible = "nordic,nrf-spim";
  status = "okay";

  pinctrl-0 = <&spi3_default>;
  pinctrl-1 = <&spi3_sleep>;
  pinctrl-names = "default", "sleep";

  led_strip: ws2812@0 {
    compatible = "worldsemi,ws2812-spi";

    /* SPI */
    reg = <0>; /* ignored, but necessary for SPI bindings */
    spi-max-frequency = <4000000>;

    /* WS2812 */
    chain-length = <4>; /* arbitrary; change at will */
    spi-one-frame = <0x70>;
    spi-zero-frame = <0x40>;

    color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
  };
};

&i2c0 {
    status = "disabled";
    glidepoint0: glidepoint@2a {
        compatible = "cirque,pinnacle";
        reg = <0x2a>;
        status = "disabled";
        dr-gpios = <&gpio1 2 (GPIO_ACTIVE_HIGH)>;

        sensitivity = "1x";
        // sleep;
        // no-taps;
    };

};

nice_view_spi: &spi1 {
  compatible = "nordic,nrf-spim";
  pinctrl-0 = <&spi1_default>;
  pinctrl-1 = <&spi1_sleep>;
  pinctrl-names = "default", "sleep";
  cs-gpios = <&gpio0 22 GPIO_ACTIVE_HIGH>;

  nice_view: ls0xx@0 {
    compatible = "sharp,ls0xx";
    spi-max-frequency = <1000000>;
    reg = <0>;
    width = <160>;
    height = <68>;
  };
};

// / {
// 	/* assign `input-listener` to all pointing devices */
// 	/* &glidepoint0 on central, &glidepoint1 on peripheral */
//     tpad_central_listener {
//         compatible = "zmk,input-behavior-listener";
//         device = <&glidepoint0>;
//         y-invert;
//         scale-multiplier = <3>;
//         // xy-swap;
//         // x-invert;
// 	};
// 
//     tpad_peripheral_listener {
//         compatible = "zmk,input-behavior-listener";
//         device = <&glidepoint1>;
//         y-invert;
//         scale-multiplier = <3>;
//         // xy-swap;
//         // x-invert;
// 	};
// };
