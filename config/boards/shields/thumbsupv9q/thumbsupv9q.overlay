#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,kscan = &kscan0;
	zmk,matrix_transform = &default_transform;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <2>;
// | ESC  | Q | W | E | R | T |         | Y | U | I | O | P | BKSPC |
// | TAB  | A | S | D | F | G |         | H | J | K | L | ; | ENTER |
// | LCTR | Z | X | C | V | B |         | N | M | , | . | / | RCTR  | 
//            |WIN|ALT|RSE|SFT|SPC| |SPC|SFT|LOW|ALT|MNU|
        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5)                  RC(0,6) RC(0,7) RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)                  RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
//RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)                  RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
//                RC(3,2) RC(3,3) RC(3,5) RC(3,4) RC(3,1) RC(3,10) RC(3,7) RC(3,6) RC(3,8) RC(3,9)
        >;
    };

    kscan0: kscan_0 {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";

        col-gpios
            = <&pro_micro 16 GPIO_ACTIVE_HIGH>
            , <&pro_micro 10 GPIO_ACTIVE_HIGH>
            , <&pro_micro 9 GPIO_ACTIVE_HIGH>
            , <&pro_micro 8 GPIO_ACTIVE_HIGH>
            , <&pro_micro 7 GPIO_ACTIVE_HIGH>
            , <&pro_micro 6 GPIO_ACTIVE_HIGH>
            , <&pro_micro 14 GPIO_ACTIVE_HIGH>
            , <&pro_micro 21 GPIO_ACTIVE_HIGH>
            , <&pro_micro 20 GPIO_ACTIVE_HIGH>
            , <&pro_micro 19 GPIO_ACTIVE_HIGH>
            , <&pro_micro 18 GPIO_ACTIVE_HIGH>
            , <&pro_micro 15 GPIO_ACTIVE_HIGH>
            ;

        row-gpios
//            = <&pro_micro 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            = <&pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 0 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
//            , <&pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
//            , <&pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;
    };

     glidepoint_listener: glidepoint_listener {
        compatible = "zmk,input-listener";
        status = "okay ";
        device = <&glidepoint>;
    };
};


//&pro_micro_i2c {
//    status = "okay";
//    glidepoint: glidepoint@0 {
//        compatible = "cirque,pinnacle";
//        reg = <0x2a>;
//        status = "okay";
//        dr-gpios = <&pro_micro 1 (GPIO_ACTIVE_HIGH)>;
//         sensitivity = "2x";
//        sleep;
//        //no-taps;
//        y-invert;
//    };
//};

&pinctrl {
    /* configuration for i2c0 device, default state */
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 17)>,
                <NRF_PSEL(TWIM_SCL, 0, 20)>;
        };
    };

    i2c0_sleep: i2c0_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 17)>,
                <NRF_PSEL(TWIM_SCL, 0, 20)>;
            low-power-enable;
        };
    };
};


&i2c0 {
    compatible = "nordic,nrf-twim"; // I2C controller instead of generic
    status = "okay";
    pinctrl-0 = <&i2c0_default GPIO_ACTIVE_LOW>;
    pinctrl-1 = <&i2c0_sleep GPIO_ACTIVE_LOW>;
    pinctrl-names = "default", "sleep";
    clock-frequency = <I2C_BITRATE_FAST>;

    glidepoint: glidepoint@2a {
        compatible = "cirque,pinnacle";
        reg = <0x2a>;
        status = "okay";
        dr-gpios = <&pro_micro 1 (GPIO_ACTIVE_HIGH)>;
        sensitivity = "4x";
        //sleep;
        //no-taps;
    };
};


&glidepoint  {
    status = "okay";
};

&glidepoint_listener {
    status = "okay";
};

